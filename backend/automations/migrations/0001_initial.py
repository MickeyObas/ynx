# Generated by Django 5.2.7 on 2025-10-23 07:47

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Integration',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.SlugField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=150)),
                ('description', models.TextField(blank=True)),
                ('config_schema', models.JSONField(default=dict)),
                ('oauth_enabled', models.BooleanField(default=False)),
                ('webhook_supported', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Automation',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('enabled', 'Enabled'), ('disabled', 'Disabled'), ('paused', 'Paused')], default='draft', max_length=20)),
                ('settings', models.JSONField(default=dict)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='automations', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Execution',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('trigger_event', models.JSONField(default=dict)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('success', 'Success'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], db_index=True, default='pending', max_length=20)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('attempt', models.PositiveIntegerField(default=0)),
                ('meta', models.JSONField(default=dict)),
                ('automation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='executions', to='automations.automation')),
            ],
        ),
        migrations.CreateModel(
            name='Connection',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=200)),
                ('config', models.JSONField(default=dict)),
                ('secrets', models.JSONField(default=dict)),
                ('status', models.CharField(choices=[('active', 'Active'), ('disabled', 'Disabled')], default='active', max_length=20)),
                ('last_tested', models.DateTimeField(blank=True, null=True)),
                ('integration', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='connections', to='automations.integration')),
            ],
        ),
        migrations.CreateModel(
            name='Step',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('kind', models.CharField(choices=[('action', 'Action'), ('condition', 'Condition')], max_length=20)),
                ('order', models.PositiveIntegerField(db_index=True)),
                ('action_name', models.CharField(blank=True, max_length=150)),
                ('config', models.JSONField(default=dict)),
                ('automation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='steps', to='automations.automation')),
                ('connection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='automations.connection')),
                ('integration', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='automations.integration')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('queued', 'Queued'), ('running', 'Running'), ('success', 'Success'), ('failed', 'Failed')], db_index=True, default='queued', max_length=20)),
                ('input_payload', models.JSONField(default=dict)),
                ('output_payload', models.JSONField(blank=True, null=True)),
                ('error', models.TextField(blank=True, null=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('attempt', models.PositiveIntegerField(default=0)),
                ('execution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='automations.execution')),
                ('step', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='automations.step')),
            ],
        ),
        migrations.CreateModel(
            name='Trigger',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('webhook', 'Webhook'), ('poll', 'Polling'), ('schedule', 'Schedule')], max_length=20)),
                ('config', models.JSONField(default=dict)),
                ('connection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='automations.connection')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='automation',
            name='trigger',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='automations.trigger'),
        ),
        migrations.CreateModel(
            name='WebhookEvent',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('raw_payload', models.JSONField(default=dict)),
                ('headers', models.JSONField(default=dict)),
                ('processed', models.BooleanField(db_index=True, default=False)),
                ('trigger', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='webhook_events', to='automations.trigger')),
            ],
        ),
        migrations.CreateModel(
            name='Workspace',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('is_active', models.BooleanField(default=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='owned_workspaces', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='trigger',
            name='workspace',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='triggers', to='automations.workspace'),
        ),
        migrations.CreateModel(
            name='RetryPolicy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('config', models.JSONField(default=dict)),
                ('workspace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='retry_policies', to='automations.workspace')),
            ],
        ),
        migrations.AddField(
            model_name='connection',
            name='workspace',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='connections', to='automations.workspace'),
        ),
        migrations.AddField(
            model_name='automation',
            name='workspace',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='automations', to='automations.workspace'),
        ),
        migrations.CreateModel(
            name='WorkspaceMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('member', 'Member')], default='member', max_length=20)),
                ('joined_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('workspace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='automations.workspace')),
            ],
        ),
        migrations.AddField(
            model_name='workspace',
            name='members',
            field=models.ManyToManyField(related_name='workspaces', through='automations.WorkspaceMembership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='execution',
            index=models.Index(fields=['automation', 'status'], name='automations_automat_6da708_idx'),
        ),
        migrations.AddIndex(
            model_name='execution',
            index=models.Index(fields=['created_at'], name='automations_created_257c0b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='step',
            unique_together={('automation', 'order')},
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['status', 'created_at'], name='automations_status_75ba4c_idx'),
        ),
        migrations.AddIndex(
            model_name='webhookevent',
            index=models.Index(fields=['processed', 'created_at'], name='automations_process_8eebc5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='retrypolicy',
            unique_together={('workspace', 'name')},
        ),
        migrations.AddIndex(
            model_name='connection',
            index=models.Index(fields=['workspace', 'integration'], name='automations_workspa_30e247_idx'),
        ),
        migrations.AddIndex(
            model_name='automation',
            index=models.Index(fields=['workspace', 'status'], name='automations_workspa_f8d88e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='workspacemembership',
            unique_together={('workspace', 'user')},
        ),
    ]
